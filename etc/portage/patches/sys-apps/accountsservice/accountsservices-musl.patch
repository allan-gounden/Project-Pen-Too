diff --git a/meson.build b/meson.build
index 075776f..bba4990 100644
--- a/meson.build
+++ b/meson.build
@@ -71,6 +71,7 @@ check_functions = [
   'getusershell',
   'setutxdb',
   'fgetpwent',
+  'fgetspent_r'
 ]
 
 foreach func: check_functions
@@ -102,7 +103,9 @@ elif cc.has_header_symbol('paths.h', '_PATH_WTMPX')
   config_h.set('PATH_WTMP', '_PATH_WTMPX')
 else
   path_wtmp = '/var/log/utx.log'
-  assert(run_command('test', '-e', path_wtmp).returncode() == 0, 'Do not know which filename to watch for wtmp changes')
+  if get_option('check_wtmp')
+    assert(run_command('test', '-e', path_wtmp).returncode() == 0, 'Do not know which filename to watch for wtmp changes')
+  endif
   config_h.set_quoted('PATH_WTMP', path_wtmp)
 endif
 
diff --git a/meson_options.txt b/meson_options.txt
index 93f384a..4fec12e 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -6,6 +6,7 @@ option('extra_admin_groups', type: 'array', value: [], description: 'Comma-separ
 option('minimum_uid', type: 'integer', value: 1000, description: 'Set minimum uid for human users')
 
 option('elogind', type: 'boolean', value: false, description: 'Use elogind')
+option('check_wtmp', type: 'boolean', value: false, description: 'Check if wtmp path is valid (musl workaround)')
 
 option('introspection', type: 'boolean', value: true, description: 'Enable introspection for this build')
 option('vapi', type: 'boolean', value: true, description : 'Enable Vala bindings for this build')
diff --git a/src/daemon.c b/src/daemon.c
index c8b6320..5111989 100644
--- a/src/daemon.c
+++ b/src/daemon.c
@@ -51,6 +51,32 @@
 #include "user.h"
 #include "accounts-user-generated.h"
 
+#ifndef HAVE_FGETSPENT_R
+static int
+fgetspent_r(FILE *fp,
+            struct spwd *spbuf,
+            char *buf,
+            size_t buflen,
+            struct spwd **spbufp)
+{
+       struct spwd *shadow_entry = fgetspent(fp);
+       if(!shadow_entry)
+               return -1;
+       size_t namplen = strlen(shadow_entry->sp_namp);
+       size_t pwdplen = strlen(shadow_entry->sp_pwdp);
+
+       if(namplen + pwdplen + 2 > buflen)
+               return -1;
+
+       *spbufp = memcpy(spbuf, shadow_entry, sizeof(struct spwd));
+       spbuf->sp_namp = strncpy(buf, shadow_entry->sp_namp, namplen + 1);
+       spbuf->sp_pwdp = strncpy(buf + namplen + 1, shadow_entry->sp_pwdp, pwdplen + 1);
+
+       return 0;
+}
+#endif // HAVE_FGETSPENT_R
+
+
 #define PATH_PASSWD "/etc/passwd"
 #define PATH_SHADOW "/etc/shadow"
 #define PATH_GROUP "/etc/group"
